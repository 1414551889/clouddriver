apply plugin: 'spinnaker.application'

if (gradle.includedCloudProviderProjects.contains(':clouddriver-oracle')) {
  tasks.startScripts.dependsOn(':clouddriver-oracle:unpackSdk')
  tasks.startScripts.mustRunAfter(':clouddriver-oracle:unpackSdk')
}

ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
}

mainClassName = 'com.netflix.spinnaker.clouddriver.Main'
run {
  systemProperty('spring.config.location', project.springConfigLocation)
}

configurations.all {
  exclude group: 'javax.servlet', module: 'servlet-api'
  exclude group: "org.slf4j", module: "slf4j-log4j12"
}

repositories {
  maven { url "https://adxsnapshots.azurewebsites.net" }
}

dependencies {
  api project(":clouddriver-core")
  api project(":clouddriver-security")
  api project(":clouddriver-artifacts")
  api project(":clouddriver-sql-mysql")

  runtimeOnly "com.netflix.spinnaker.kork:kork-core"
  api "com.netflix.spinnaker.kork:kork-web"
  api "com.netflix.spinnaker.kork:kork-stackdriver"
  api "com.netflix.spinnaker.kork:kork-swagger"
  api "org.springframework.boot:spring-boot-actuator"
  api "org.springframework.boot:spring-boot-starter-data-rest"
  api "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.slf4j:slf4j-api"
  //this brings in the jetty GzipFilter which boot will autoconfigure
  runtime 'org.eclipse.jetty:jetty-servlets:9.2.11.v20150529'

  testImplementation project(":clouddriver-elasticsearch")

  // Add each included cloud provider project as a runtime dependency
  gradle.includedCloudProviderProjects.each {
    api project(":${it}")
  }
}

